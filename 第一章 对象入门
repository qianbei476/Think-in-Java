1.OOP
    
    所有的编程语言的最终目的都是提供一种“抽象”方法。
    
    可替换性是OOP最重要的概念之一。
    
    面向对象程序设计方法特征：
    （1）所有东西都是对象
    （2）程序是一大堆对象的组合，通过消息传递，各对象知道自己该做什么
    （3）每个对象都有自己的存储空间，可容纳其他对象
    （4）每个对象都有一种类型
    （5）同一类所有对象都能接收相同的消息
    
    “可替换性”：如circle类属于shape类，程序代码统一指挥shape，其自动控制所有符合shape描述的对象，包括circle
    
    “接口”（interface）规定了可对一个特定的对象发出哪些请求。
    
    public、inherit、friendly（package）、protected。
    
    “创建一个对象”--将类的一个对象置入一个新类。
    
    “组织”--在现有类的基础上组织一个新类，新类可由任意数量和类型的其他对象构成，也将组织称作“包含”关系，比如“一辆车组织/包含了一个变速箱”。
    
    通常，继承最终会以创建一系列类收场，所有类都建立在统一的接口基础上，对于这一系列的类，我们需要的一项重要处理是将衍生类的对象当作基础类的一个对象对
待。意味着我们只需要编写单一的代码，令其忽略类型的特定细节，只与基础类打交道，赋予了程序“扩展能力”，具有“扩展性。”

    “多形性”（Polymorphism）：将一条消息发送给对象时，如果并不知道对方的具体类型是什么，但采取的行动同样是正确的，这种情况就叫多形性。对面向对象的程
序设计语言来说，它们用以实现多形性的方法叫做“动态绑定”，编译器和运行期系统会自动负责对所有细节的控制，是自动进行的。（c++中关键字为virtual）

    对象的创建和存在时间：
    （1）c++只需将对象放置在堆栈（自动或定域变量）或者静态存储区域，为存储空间的分配和释放提供了一个优先级，但是牺牲了灵活性
    （2）在内存池中动态创建对象，该内存池亦叫“堆”或者“内存堆（Heap）”，虽然比在堆栈里出处理更慢更复杂，但是具有更大的灵活性
    程序化的破坏与清理
    利用运行环境提供的一种“垃圾收集器”特性，自动寻找不再使用的对象并清除。JAVA-垃圾收集器
    
    数组矢量（Vector）、继续器（Iterator，1.2）、枚举（Enumeration，1.1）、集（Set）、列表（List）
    插入：     List>Vector
    移动-查找：Vector>List
    
    在某些特殊场合，比如在一个程序执行必须保持稳定、连贯的时候（实时程序，并不是所有的实时编程问题）避免使用垃圾收集器。
    
    违例控制模块-异常（Exception）：
    （1）保证程序连贯性
    （2）免去人为强制检查代码
    
    在一个程序中，这些独立运行的片段叫做“线程”（Thread），利用它编程的概念就叫做“多线程处理”。
    
    JAVA对多线程处理的支持是在对象这一级支持的，所以一个执行线程可表达为一个对象。JAVA也提供了有限的资源锁定方案，能锁定任何对象占用的内存（内存
实际也是多种共享资源的一种），所以同一时间只能有一个线程使用特定的内存空间。需要使用关键字synchronized。

    将各种元素集中到一起，信息仓库、用于投递信息的软件以及信息及软件所在的那台机器，他们联合起来便叫做“服务器”（Server）。
    
    驻留在远程机器上的软件，他们需要与服务器通信，取回信息，进行适当的处理，然后在远程机器上显示出来，这些叫做“客户端”（Client）。
    
    用户提交的信息通过所有web服务器均能支持的“通过网关接口”（CGI）回转到服务器。
    
    脚本语言真正面向的是特定类型问题的解决，其实主要涉及如何创建更丰富、更具有互动能力的图像用户界面（GUI）。
    
    脚本语言的宗旨是尽可能的简化与快速，所以在考虑更复杂的方案之前（如JAVA及ActiveX），首先考虑脚本语言是否可行。
    
    JAVA程序片（Applet）或小应用程序，是一种非常小的程序，只能在web浏览器运行。
    
    自动下载和通过因特网运行程序，这类安全隐患问题目前解决办法是“数字签名”，且JAVA通过“沙箱”来防止，由内嵌在本地浏览器的JAVA解释器检查。
    
    
